
AIRR
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data in AIRR format. The AIRR .tsv format is explained here: https://docs.airr-community.org/en/stable/datarep/format.html
And the AIRR rearrangement schema can be found here: https://docs.airr-community.org/en/stable/datarep/rearrangements.html

Arguments:

- path (str): Either the path to the file to import, or the path to the folder locating one or multiple files with .tsv, .csv or .txt extensions. By default path is set to the current working directory.

- is_repertoire (bool): Should be set to False, as we import a SequenceDataset. 

- import_productive (bool): Whether productive sequences (with value 'T' in column productive) should be included in the imported sequences. By default, import_productive is True.

- import_with_stop_codon (bool): Whether sequences with stop codons (with value 'T' in column stop_codon) should be included in the imported sequences. This only applies if column stop_codon is present. By default, import_with_stop_codon is False.

- import_out_of_frame (bool): Whether out of frame sequences (with value 'F' in column vj_in_frame) should be included in the imported sequences. This only applies if column vj_in_frame is present. By default, import_out_of_frame is False.

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means the first and last amino acids are removed from the CDR3 sequence, as AIRR uses the IMGT junction. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- column_mapping (dict): A mapping from AIRR column names to immuneML's internal data representation. A custom column mapping can be specified here if necessary (for example; adding additional data fields if they are present in the AIRR file, or using alternative column names). Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id'].. For AIRR, this is by default set to:

    .. indent with spaces
    .. code-block:: yaml

        junction: sequence
        junction_aa: sequence_aa
        locus: chain

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded. For AIRR format, there is no default column_mapping_synonyms.

- metadata_column_mapping (dict): Specifies metadata for Sequence- and ReceptorDatasets. This should specify a mapping similar to column_mapping where keys are AIRR column names and values are the names that are internally used in immuneML as metadata fields. These metadata fields can be used as prediction labels for Sequence- and ReceptorDatasets. This parameter can also be used to specify sequence-level metadata columns for RepertoireDatasets, which can be used by reports. To set prediction label metadata for RepertoireDatasets, see metadata_file instead. For AIRR format, there is no default metadata_column_mapping.

- separator (str): Column separator, for AIRR this is by default "\t".


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_airr_dataset:
        format: AIRR
        params:
            path: path/to/files/
            is_repertoire: False
            import_productive: True # whether to include productive sequences in the dataset
            import_with_stop_codon: False # whether to include sequences with stop codon in the dataset
            import_out_of_frame: False # whether to include out of frame sequences in the dataset
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even if the `sequences` column is empty (provided that other fields are as specified here)
            import_empty_aa_sequences: False # remove all sequences with empty `sequence_aa` column
            # Optional fields with AIRR-specific defaults, only change when different behavior is required:
            separator: "\t" # column separator
            region_type: IMGT_CDR3 # what part of the sequence to import
            column_mapping: # column mapping AIRR: immuneML
                junction: sequence
                junction_aa: sequence_aa
                locus: chain


Generic
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data from any tabular file into a Repertoire-, Sequence- or ReceptorDataset. RepertoireDatasets should be
used when making predictions per repertoire, such as predicting a disease state. SequenceDatasets or ReceptorDatasets
should be used when predicting values for unpaired (single-chain) and paired immune receptors respectively,
like antigen specificity.

This importer works similarly to other importers, but has no predefined default values for which fields are imported,
and can therefore be tailored to import data from various different tabular files with headers.

For ReceptorDatasets: this importer assumes the two receptor sequences appear on different lines in the file, and can
be paired together by a common sequence identifier. If you instead want to import a ReceptorDataset from a tabular
file that contains both receptor chains on one line, see :ref:`SingleLineReceptor` import


Arguments:

- path (str): For RepertoireDatasets, this is the path to a directory with files to import. For Sequence- or ReceptorDatasets this path may either be the path to the file to import, or the path to the folder locating one or multiple files with .tsv, .csv or .txt extensions. By default path is set to the current working directory.

- is_repertoire (bool): If True, this imports a RepertoireDataset. If False, it imports a SequenceDataset or ReceptorDataset. By default, is_repertoire is set to True.

- metadata_file (str): Required for RepertoireDatasets. This parameter specifies the path to the metadata file. This is a csv file with columns filename, subject_id and arbitrary other columns which can be used as labels in instructions. For setting Sequence- or ReceptorDataset metadata, metadata_file is ignored, see metadata_column_mapping instead.

- paired (str): Required for Sequence- or ReceptorDatasets. This parameter determines whether to import a SequenceDataset (paired = False) or a ReceptorDataset (paired = True). In a ReceptorDataset, two sequences with chain types specified by receptor_chains are paired together based on a common identifier. This identifier should be mapped to the immuneML field 'sequence_identifiers' using the column_mapping.

- receptor_chains (str): Required for ReceptorDatasets. Determines which pair of chains to import for each Receptor. Valid values are `TRA_TRB`, `TRG_TRD`, `IGH_IGL`, `IGH_IGK`.

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means immuneML assumes the IMGT junction (including leading C and trailing Y/F amino acids) is used in the input file, and the first and last amino acids will be removed from the sequences to retrieve the IMGT CDR3 sequence. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- column_mapping (dict): Required for all datasets. A mapping where the keys are the column names in the input file, and the values correspond to the names used in immuneML's internal data representation. Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id'].. At least sequences (nucleotide) or sequence_aas (amino acids) must be specified, but all other fields are optional. A column mapping can look for example like this:

    .. indent with spaces
    .. code-block:: yaml

        file_column_amino_acids: sequence_aa
        file_column_v_genes: v_call
        file_column_j_genes: j_call
        file_column_frequencies: duplicate_count

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded. For Generic import, there is no default column_mapping_synonyms.

- metadata_column_mapping (dict): Specifies metadata for Sequence- and ReceptorDatasets. This should specify a mapping similar to column_mapping where keys are file column names and values are the names that are internally used in immuneML as metadata fields. These metadata fields can be used as prediction labels for Sequence- and ReceptorDatasets. This parameter can also be used to specify sequence-level metadata columns for RepertoireDatasets, which can be used by reports. To set prediction label metadata for RepertoireDatasets, see metadata_file instead. There is no default metadata_column_mapping.

    .. indent with spaces
    .. code-block:: yaml

            file_column_antigen_specificity: antigen_specificity

- columns_to_load (list): Optional; specifies which columns to load from the input file. This may be useful if the input files contain many unused columns. If no value is specified, all columns are loaded.

- separator (str): Required parameter. Column separator, for example "\t" or ",". The default value is "\t"


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_generic_dataset:
        format: Generic
        params:
            path: path/to/files/
            is_repertoire: True # whether to import a RepertoireDataset
            metadata_file: path/to/metadata.csv # metadata file for RepertoireDataset
            paired: False # whether to import SequenceDataset (False) or ReceptorDataset (True) when is_repertoire = False
            receptor_chains: TRA_TRB # what chain pair to import for a ReceptorDataset
            separator: "\t" # column separator
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even though the nucleotide sequence might be empty
            import_empty_aa_sequences: False # filter out sequences if they don't have sequence_aa set
            region_type: IMGT_CDR3 # what part of the sequence to import
            column_mapping: # column mapping file: immuneML
                file_column_amino_acids: sequence_aas
                file_column_v_genes: v_call
                file_column_j_genes: j_call
                file_column_frequencies: duplicate_count
            metadata_column_mapping: # metadata column mapping file: immuneML
                file_column_antigen_specificity: antigen_specificity
            columns_to_load:  # which subset of columns to load from the file
                - file_column_amino_acids
                - file_column_v_genes
                - file_column_j_genes
                - file_column_frequencies
                - file_column_antigen_specificity


IGoR
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data generated by `IGoR <https://github.com/qmarcou/IGoR>`_ simulations into a Repertoire-, or SequenceDataset.
RepertoireDatasets should be used when making predictions per repertoire, such as predicting a disease state.
SequenceDatasets should be used when predicting values for unpaired (single-chain) immune receptors, like
antigen specificity.

Note that you should run IGoR with the --CDR3 option specified, this tool imports the generated CDR3 files.
Sequences with missing anchors are not imported, meaning only sequences with value '1' in the anchors_found column are imported.
Nucleotide sequences are automatically translated to amino acid sequences.

Reference: Quentin Marcou, Thierry Mora, Aleksandra M. Walczak
‘High-throughput immune repertoire analysis with IGoR’. Nature Communications, (2018)
`doi.org/10.1038/s41467-018-02832-w <https://doi.org/10.1038/s41467-018-02832-w>`_.

Arguments:

- path (str): For RepertoireDatasets, this is the path to a directory with IGoR files to import. For Sequence- or ReceptorDatasets this path may either be the path to the file to import, or the path to the folder locating one or multiple files with .tsv, .csv or .txt extensions. By default path is set to the current working directory.

- is_repertoire (bool): If True, this imports a RepertoireDataset. If False, it imports a SequenceDataset. By default, is_repertoire is set to True.

- metadata_file (str): Required for RepertoireDatasets. This parameter specifies the path to the metadata file. This is a csv file with columns filename, subject_id and arbitrary other columns which can be used as labels in instructions. Only the IGoR files included under the column 'filename' are imported into the RepertoireDataset. For setting SequenceDataset metadata, metadata_file is ignored, see metadata_column_mapping instead.

- import_with_stop_codon (bool): Whether sequences with stop codons should be included in the imported sequences. By default, import_with_stop_codon is False.

- import_out_of_frame (bool): Whether out of frame sequences (with value '0' in column is_inframe) should be included in the imported sequences. By default, import_out_of_frame is False.

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means the first and last amino acids are removed from the CDR3 sequence, as IGoR uses the IMGT junction. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- column_mapping (dict): A mapping from IGoR column names to immuneML's internal data representation. A custom column mapping can be specified here if necessary (for example; adding additional data fields if they are present in the IGoR file, or using alternative column names). Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id'].. For IGoR, this is by default set to:

    .. indent with spaces
    .. code-block:: yaml

        nt_CDR3: sequences
        seq_index: sequence_identifiers

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded. For IGoR format, there is no default column_mapping_synonyms.

- metadata_column_mapping (dict): Specifies metadata for Sequence- and ReceptorDatasets. This should specify a mapping similar to column_mapping where keys are IGoR column names and values are the names that are internally used in immuneML as metadata fields. These metadata fields can be used as prediction labels for Sequence- and ReceptorDatasets. This parameter can also be used to specify sequence-level metadata columns for RepertoireDatasets, which can be used by reports. To set prediction label metadata for RepertoireDatasets, see metadata_file instead. For IGoR format, there is no default metadata_column_mapping.

- separator (str): Column separator, for IGoR this is by default ",".


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_igor_dataset:
        format: IGoR
        params:
            path: path/to/files/
            is_repertoire: True # whether to import a RepertoireDataset (True) or a SequenceDataset (False)
            metadata_file: path/to/metadata.csv # metadata file for RepertoireDataset
            metadata_column_mapping: # metadata column mapping IGoR: immuneML for SequenceDataset
                igor_column_name1: metadata_label1
                igor_column_name2: metadata_label2
            import_with_stop_codon: False # whether to include sequences with stop codon in the dataset
            import_out_of_frame: False # whether to include out of frame sequences in the dataset
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even though the nucleotide sequence might be empty
            # Optional fields with IGoR-specific defaults, only change when different behavior is required:
            separator: "," # column separator
            region_type: IMGT_CDR3 # what part of the sequence to import
            column_mapping: # column mapping IGoR: immuneML
                nt_CDR3: sequences
                seq_index: sequence_identifiers


IReceptor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports AIRR datasets retrieved through the `iReceptor Gateway <https://gateway.ireceptor.org/home>`_ into a Repertoire-, Sequence- or ReceptorDataset.
The differences between this importer and the :ref:`AIRR` importer are:

* This importer takes in a list of .zip files, which must contain one or more AIRR tsv files, and for each AIRR file, a corresponding metadata json file must be present.
* This importer does not require a metadata csv file for RepertoireDataset import, it is generated automatically from the metadata json files.

RepertoireDatasets should be used when making predictions per repertoire, such as predicting a disease state.
SequenceDatasets or ReceptorDatasets should be used when predicting values for unpaired (single-chain) and paired
immune receptors respectively, like antigen specificity.

AIRR rearrangement schema can be found here: https://docs.airr-community.org/en/stable/datarep/rearrangements.html

When importing a ReceptorDataset, the AIRR field cell_id is used to determine the chain pairs.


Arguments:

- path (str): This is the path to a directory **with .zip files** retrieved from the iReceptor Gateway. These .zip files should include AIRR files (with .tsv extension) and corresponding metadata.json files with matching names (e.g., for my_dataset.tsv the corresponding metadata file is called my_dataset-metadata.json). The zip files must use the .zip extension.

- is_repertoire (bool): If True, this imports a RepertoireDataset. If False, it imports a SequenceDataset or ReceptorDataset. By default, is_repertoire is set to True.

- paired (str): Required for Sequence- or ReceptorDatasets. This parameter determines whether to import a SequenceDataset (paired = False) or a ReceptorDataset (paired = True). In a ReceptorDataset, two sequences with chain types specified by receptor_chains are paired together based on the identifier given in the AIRR column named 'cell_id'.

- receptor_chains (str): Required for ReceptorDatasets. Determines which pair of chains to import for each Receptor. Valid values are `TRA_TRB`, `TRG_TRD`, `IGH_IGL`, `IGH_IGK`. If receptor_chains is not provided, the chain pair is automatically detected (only one chain pair type allowed per repertoire).

- import_productive (bool): Whether productive sequences (with value 'T' in column productive) should be included in the imported sequences. By default, import_productive is True.

- import_with_stop_codon (bool): Whether sequences with stop codons (with value 'T' in column stop_codon) should be included in the imported sequences. This only applies if column stop_codon is present. By default, import_with_stop_codon is False.

- import_out_of_frame (bool): Whether out of frame sequences (with value 'F' in column vj_in_frame) should be included in the imported sequences. This only applies if column vj_in_frame is present. By default, import_out_of_frame is False.

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means the first and last amino acids are removed from the CDR3 sequence, as AIRR uses the IMGT junction. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- column_mapping (dict): A mapping from AIRR column names to immuneML's internal data representation. For AIRR, this is by default set to the values shown in YAML below.  A custom column mapping can be specified here if necessary (for example; adding additional data fields if they are present in the AIRR file, or using alternative column names). Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id']. A custom column mapping can be specified here if necessary (for example; adding additional data fields if they are present in the AIRR file, or using alternative column names). Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id']..

    .. indent with spaces
    .. code-block:: yaml

            junction: sequences
            junction_aa: sequence_aas
            v_call: v_alleles
            j_call: j_alleles
            locus: chains
            duplicate_count: counts
            sequence_id: sequence_identifiers

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded. For AIRR format, there is no default column_mapping_synonyms.

- metadata_column_mapping (dict): Specifies metadata for Sequence- and ReceptorDatasets. This should specify a mapping similar to column_mapping where keys are AIRR column names and values are the names that are internally used in immuneML as metadata fields. These metadata fields can be used as prediction labels for Sequence- and ReceptorDatasets. For AIRR format, there is no default metadata_column_mapping. When importing a RepertoireDataset, the metadata is automatically extracted from the metadata json files.

- separator (str): Column separator, for AIRR this is by default "\t".


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_airr_dataset:
        format: IReceptor
        params:
            path: path/to/zipfiles/
            is_repertoire: True # whether to import a RepertoireDataset
            metadata_column_mapping: # metadata column mapping AIRR: immuneML for Sequence- or ReceptorDatasetDataset
                airr_column_name1: metadata_label1
                airr_column_name2: metadata_label2
            import_productive: True # whether to include productive sequences in the dataset
            import_with_stop_codon: False # whether to include sequences with stop codon in the dataset
            import_out_of_frame: False # whether to include out of frame sequences in the dataset
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even if the `sequences` column is empty (provided that other fields are as specified here)
            import_empty_aa_sequences: False # remove all sequences with empty `sequence_aas` column
            # Optional fields with AIRR-specific defaults, only change when different behavior is required:
            separator: "\t" # column separator
            region_type: IMGT_CDR3 # what part of the sequence to import
            column_mapping: # column mapping AIRR: immuneML
                junction: sequences
                junction_aa: sequence_aas
                v_call: v_alleles
                j_call: j_alleles
                locus: chains
                duplicate_count: counts
                sequence_id: sequence_identifiers


ImmuneML
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports the dataset from the files previously exported by immuneML. It closely resembles the AIRR format but relies on binary
representations and is optimized for faster read-in at runtime.

ImmuneMLImport can import any kind of dataset (RepertoireDataset, SequenceDataset, ReceptorDataset).

This format includes:

 1. a dataset file in yaml format with iml_dataset extension with parameters:

    - name,
    - identifier,
    - metadata_file (for repertoire datasets),
    - metadata_fields (for repertoire datasets),
    - repertoire_ids (for repertoire datasets)
    - element_ids (for receptor and sequence datasets),
    - labels,

 2. a csv metadata file (only for repertoire datasets, should be in the same folder as the iml_dataset file),

 3. data files for different types of data. For repertoire datasets, data files include one binary numpy file per repertoire with sequences and associated information and one metadata yaml file per repertoire with details such as repertoire identifier, disease status, subject id and other similar available information. For sequence and receptor datasets, sequences or receptors respectively, are stored in batches in binary numpy files.

Arguments:

- path (str): The path to the previously created dataset file. This file should have an '.iml_dataset' extension. If the path has not been specified, immuneML attempts to load the dataset from a specified metadata file (only for RepertoireDatasets).

- metadata_file (str): An optional metadata file for a RepertoireDataset. If specified, the RepertoireDataset metadata will be updated to the newly specified metadata without otherwise changing the Repertoire objects


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_dataset:
        format: ImmuneML
        params:
            path: path/to/dataset.iml_dataset
            metadata_file: path/to/metadata.csv


ImmunoSEQRearrangement
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data from Adaptive Biotechnologies immunoSEQ Analyzer rearrangement-level .tsv files into a
Repertoire-, or SequenceDataset.
RepertoireDatasets should be used when making predictions per repertoire, such as predicting a disease state.
SequenceDatasets should be used when predicting values for unpaired (single-chain) immune receptors, like
antigen specificity.

The format of the files imported by this importer is described here:
https://www.adaptivebiotech.com/wp-content/uploads/2019/07/MRK-00342_immunoSEQ_TechNote_DataExport_WEB_REV.pdf
Alternatively, to import sample-level .tsv files, see :ref:`ImmunoSEQSample` import

The only difference between these two importers is which columns they load from the .tsv files.


Arguments:

- path (str): For RepertoireDatasets, this is the path to a directory with files to import. For Sequence- or ReceptorDatasets this path may either be the path to the file to import, or the path to the folder locating one or multiple files with .tsv, .csv or .txt extensions. By default path is set to the current working directory.

- is_repertoire (bool): If True, this imports a RepertoireDataset. If False, it imports a SequenceDataset. By default, is_repertoire is set to True.

- metadata_file (str): Required for RepertoireDatasets. This parameter specifies the path to the metadata file. This is a csv file with columns filename, subject_id and arbitrary other columns which can be used as labels in instructions. Only the files included under the column 'filename' are imported into the RepertoireDataset. For setting SequenceDataset metadata, metadata_file is ignored, see metadata_column_mapping instead.

- import_productive (bool): Whether productive sequences (with value 'In' in column frame_type) should be included in the imported sequences. By default, import_productive is True.

- import_with_stop_codon (bool): Whether sequences with stop codons (with value 'Stop' in column frame_type) should be included in the imported sequences. By default, import_with_stop_codon is False.

- import_out_of_frame (bool): Whether out of frame sequences (with value 'Out' in column frame_type) should be included in the imported sequences. By default, import_out_of_frame is False.

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means the first and last amino acids are removed from the CDR3 sequence, as immunoSEQ files use the IMGT junction. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- column_mapping (dict): A mapping from immunoSEQ column names to immuneML's internal data representation. For immunoSEQ rearrangement-level files, this is by default set the values shown below in YAML format.         A custom column mapping can be specified here if necessary (for example: adding additional data fields if they are present in the file, or using alternative column names). Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id']..

    .. indent with spaces
    .. code-block:: yaml

        rearrangement: sequence
        amino_acid: sequence_aa
        v_resolved: v_call
        j_resolved: j_call
        templates: duplicate_count
        locus: chain

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded. For immunoSEQ rearrangement-level files, this is by default set to:

    .. indent with spaces
    .. code-block:: yaml

            v_resolved: v_alleles
            j_resolved: j_alleles

- columns_to_load (list): Specifies which subset of columns must be loaded from the file. By default, this is: [rearrangement, v_family, v_gene, v_allele, j_family, j_gene, j_allele, amino_acid, templates, frame_type, locus]

- metadata_column_mapping (dict): Specifies metadata for Sequence- and ReceptorDatasets. This should specify a mapping similar to column_mapping where keys are immunoSEQ column names and values are the names that are internally used in immuneML as metadata fields. These metadata fields can be used as prediction labels for Sequence- and ReceptorDatasets. This parameter can also be used to specify sequence-level metadata columns for RepertoireDatasets, which can be used by reports. To set prediction label metadata for RepertoireDatasets, see metadata_file instead. For immunoSEQ rearrangement .tsv files, there is no default metadata_column_mapping.

- separator (str): Column separator, for ImmunoSEQ files this is by default "\t".

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter will typically be False (import only non-empty amino acid sequences)


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_immunoseq_dataset:
        format: ImmunoSEQRearrangement
        params:
            path: path/to/files/
            is_repertoire: True # whether to import a RepertoireDataset (True) or a SequenceDataset (False)
            metadata_file: path/to/metadata.csv # metadata file for RepertoireDataset
            metadata_column_mapping: # metadata column mapping ImmunoSEQ: immuneML for SequenceDataset
                immunoseq_column_name1: metadata_label1
                immunoseq_column_name2: metadata_label2
            import_productive: True # whether to include productive sequences in the dataset
            import_with_stop_codon: False # whether to include sequences with stop codon in the dataset
            import_out_of_frame: False # whether to include out of frame sequences in the dataset
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even though the nucleotide sequence might be empty
            import_empty_aa_sequences: False # filter out sequences if they don't have sequence_aa set
            # Optional fields with ImmunoSEQ rearrangement-specific defaults, only change when different behavior is required:
            separator: "\t" # column separator
            columns_to_load: # subset of columns to load
            - rearrangement
            - v_family
            - v_gene
            - v_resolved
            - j_family
            - j_gene
            - j_resolved
            - amino_acid
            - templates
            - frame_type
            - locus
            region_type: IMGT_CDR3 # what part of the sequence to import
            column_mapping: # column mapping immunoSEQ: immuneML
                rearrangement: sequence
                amino_acid: sequence_aa
                v_resolved: v_call
                j_resolved: j_call
                templates: duplicate_count
                locus: chain


ImmunoSEQSample
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data from Adaptive Biotechnologies immunoSEQ Analyzer sample-level .tsv files into a
Repertoire-, or SequenceDataset.
RepertoireDatasets should be used when making predictions per repertoire, such as predicting a disease state.
SequenceDatasets should be used when predicting values for unpaired (single-chain) immune receptors, like
antigen specificity.

The format of the files imported by this importer is described here in section 3.4.13
https://clients.adaptivebiotech.com/assets/downloads/immunoSEQ_AnalyzerManual.pdf
Alternatively, to import rearrangement-level .tsv files, see :ref:`ImmunoSEQRearrangement` import.
The only difference between these two importers is which columns they load from the .tsv files.


Arguments:

- path (str): For RepertoireDatasets, this is the path to a directory with files to import. For Sequence- or ReceptorDatasets this path may either be the path to the file to import, or the path to the folder locating one or multiple files with .tsv, .csv or .txt extensions. By default path is set to the current working directory.

- is_repertoire (bool): If True, this imports a RepertoireDataset. If False, it imports a SequenceDataset. By default, is_repertoire is set to True.

- metadata_file (str): Required for RepertoireDatasets. This parameter specifies the path to the metadata file. This is a csv file with columns filename, subject_id and arbitrary other columns which can be used as labels in instructions. Only the files included under the column 'filename' are imported into the RepertoireDataset. For setting SequenceDataset metadata, metadata_file is ignored, see metadata_column_mapping instead.

- import_productive (bool): Whether productive sequences (with value 'In' in column frame_type) should be included in the imported sequences. By default, import_productive is True.

- import_with_stop_codon (bool): Whether sequences with stop codons (with value 'Stop' in column frame_type) should be included in the imported sequences. By default, import_with_stop_codon is False.

- import_out_of_frame (bool): Whether out of frame sequences (with value 'Out' in column frame_type) should be included in the imported sequences. By default, import_out_of_frame is False.

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means the first and last amino acids are removed from the CDR3 sequence, as immunoSEQ files use the IMGT junction. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- column_mapping (dict): A mapping from immunoSEQ column names to immuneML's internal data representation. For immunoSEQ sample-level files, this is by default set to the values shown bellow in YAML format.         A custom column mapping can be specified here if necessary (for example; adding additional data fields if they are present in the file, or using alternative column names). Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id']..

    .. indent with spaces
    .. code-block:: yaml

        nucleotide: sequence
        aminoAcid: sequence_aa
        vGeneName: v_call
        jGeneName: j_call
        sequenceStatus: frame_type
        vFamilyName: v_family
        jFamilyName: j_family
        vGeneAllele: v_allele
        jGeneAllele: j_allele
        count (templates/reads): duplicate_count

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded. For immunoSEQ sample .tsv files, there is no default column_mapping_synonyms.

- columns_to_load (list): Specifies which subset of columns must be loaded from the file. By default, this is: [nucleotide, aminoAcid, count (templates/reads), vFamilyName, vGeneName, vGeneAllele, jFamilyName, jGeneName, jGeneAllele, sequenceStatus]; these are the columns from the original file that will be imported

- metadata_column_mapping (dict): Specifies metadata for Sequence- and ReceptorDatasets. This should specify a mapping similar to column_mapping where keys are immunoSEQ column names and values are the names that are internally used in immuneML as metadata fields. These metadata fields can be used as prediction labels for Sequence- and ReceptorDatasets. This parameter can also be used to specify sequence-level metadata columns for RepertoireDatasets, which can be used by reports. To set prediction label metadata for RepertoireDatasets, see metadata_file instead. For immunoSEQ sample .tsv files, there is no default metadata_column_mapping.

- separator (str): Column separator, for ImmunoSEQ files this is by default "\t".


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_immunoseq_dataset:
        format: ImmunoSEQSample
        params:
            path: path/to/files/
            is_repertoire: True # whether to import a RepertoireDataset (True) or a SequenceDataset (False)
            metadata_file: path/to/metadata.csv # metadata file for RepertoireDataset
            metadata_column_mapping: # metadata column mapping ImmunoSEQ: immuneML for SequenceDataset
                immunoseq_column_name1: metadata_label1
                immunoseq_column_name2: metadata_label2
            import_productive: True # whether to include productive sequences in the dataset
            import_with_stop_codon: False # whether to include sequences with stop codon in the dataset
            import_out_of_frame: False # whether to include out of frame sequences in the dataset
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even though the nucleotide sequence might be empty
            import_empty_aa_sequences: False # filter out sequences if they don't have sequence_aa set
            # Optional fields with ImmunoSEQ sample-specific defaults, only change when different behavior is required:
            separator: "\t" # column separator
            columns_to_load: # subset of columns to load
            - nucleotide
            - aminoAcid
            - count (templates/reads)
            - vFamilyName
            - vGeneName
            - vGeneAllele
            - jFamilyName
            - jGeneName
            - jGeneAllele
            - sequenceStatus
            region_type: IMGT_CDR3 # what part of the sequence to import
            column_mapping: # column mapping immunoSEQ: immuneML
                nucleotide: sequence
                aminoAcid: sequence_aa
                vGeneName: v_call
                jGeneName: j_call
                sequenceStatus: frame_type
                vFamilyName: v_family
                jFamilyName: j_family
                vGeneAllele: v_allele
                jGeneAllele: j_allele
                count (templates/reads): duplicate_count


MiXCR
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data in MiXCR format into a Repertoire-, or SequenceDataset.
RepertoireDatasets should be used when making predictions per repertoire, such as predicting a disease state.
SequenceDatasets should be used when predicting values for unpaired (single-chain) immune receptors, like
antigen specificity.


Arguments:

- path (str): For RepertoireDatasets, this is the path to a directory with MiXCR files to import. For Sequence- or ReceptorDatasets this path may either be the path to the file to import, or the path to the folder locating one or multiple files with .tsv, .csv or .txt extensions. By default path is set to the current working directory.

- is_repertoire (bool): If True, this imports a RepertoireDataset. If False, it imports a SequenceDataset. By default, is_repertoire is set to True.

- metadata_file (str): Required for RepertoireDatasets. This parameter specifies the path to the metadata file. This is a csv file with columns filename, subject_id and arbitrary other columns which can be used as labels in instructions. Only the MiXCR files included under the column 'filename' are imported into the RepertoireDataset. For setting SequenceDataset metadata, metadata_file is ignored, see metadata_column_mapping instead.

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence, such as '_', are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means the first and last amino acids are removed from the CDR3 sequence, as MiXCR uses IMGT junction as CDR3. Alternatively to importing the CDR3 sequence, other region types can be specified here as well. Valid values are `IMGT_CDR3`, `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`.

- column_mapping (dict): A mapping from MiXCR column names to immuneML's internal data representation. The columns that specify the sequences to import are handled by the region_type parameter. A custom column mapping can be specified here if necessary (for example; adding additional data fields if they are present in the MiXCR file, or using alternative column names). Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id'].. For MiXCR, this is by default set to:

    .. indent with spaces
    .. code-block:: yaml

            cloneCount: duplicate_count
            allVHitsWithScore: v_call
            allJHitsWithScore: j_call

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded. For MiXCR format, there is no default column_mapping_synonyms.

- columns_to_load (list): Specifies which subset of columns must be loaded from the MiXCR file. By default, this is: [cloneCount, allVHitsWithScore, allJHitsWithScore, aaSeqCDR3, nSeqCDR3]

- metadata_column_mapping (dict): Specifies metadata for Sequence- and ReceptorDatasets. This should specify a mapping similar to column_mapping where keys are MiXCR column names and values are the names that are internally used in immuneML as metadata fields. These metadata fields can be used as prediction labels for Sequence- and ReceptorDatasets. This parameter can also be used to specify sequence-level metadata columns for RepertoireDatasets, which can be used by reports. To set prediction label metadata for RepertoireDatasets, see metadata_file instead. For MiXCR format, there is no default metadata_column_mapping.

- separator (str): Column separator, for MiXCR this is by default "\t".


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_mixcr_dataset:
        format: MiXCR
        params:
            path: path/to/files/
            is_repertoire: True # whether to import a RepertoireDataset (True) or a SequenceDataset (False)
            metadata_file: path/to/metadata.csv # metadata file for RepertoireDataset
            metadata_column_mapping: # metadata column mapping MiXCR: immuneML for SequenceDataset
                mixcrColumnName1: metadata_label1
                mixcrColumnName2: metadata_label2
            region_type: IMGT_CDR3 # what part of the sequence to import
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even though the nucleotide sequence might be empty
            import_empty_aa_sequences: False # filter out sequences if they don't have sequence_aa set
            # Optional fields with MiXCR-specific defaults, only change when different behavior is required:
            separator: "\t" # column separator
            columns_to_load: # subset of columns to load, sequence columns are handled by region_type parameter
            - cloneCount
            - allVHitsWithScore
            - allJHitsWithScore
            - aaSeqCDR3
            - nSeqCDR3
            column_mapping: # column mapping MiXCR: immuneML
                cloneCount: duplicate_count
                allVHitsWithScore: v_call
                allJHitsWithScore: j_call


OLGA
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data generated by `OLGA <https://github.com/statbiophys/OLGA>`_ simulations into a Repertoire-, or SequenceDataset. Assumes that the columns in each
file correspond to: nucleotide sequences, amino acid sequences, v genes, j genes

Reference: Sethna, Zachary et al.
‘High-throughput immune repertoire analysis with IGoR’. Bioinformatics, (2019)
`doi.org/10.1093/bioinformatics/btz035 <https://doi.org/10.1093/bioinformatics/btz035>`_.

Arguments:

- path (str): For RepertoireDatasets, this is the path to a directory with OLGA files to import. For Sequence- or ReceptorDatasets this path may either be the path to the file to import, or the path to the folder locating one or multiple files with .tsv, .csv or .txt extensions. By default path is set to the current working directory.

- is_repertoire (bool): If True, this imports a RepertoireDataset. If False, it imports a SequenceDataset. By default, is_repertoire is set to True.

- metadata_file (str): Required for RepertoireDatasets. This parameter specifies the path to the metadata file. This is a csv file with columns filename, subject_id and arbitrary other columns which can be used as labels in instructions. Only the OLGA files included under the column 'filename' are imported into the RepertoireDataset. SequenceDataset metadata is currently not supported.

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means the first and last amino acids are removed from the CDR3 sequence, as OLGA uses the IMGT junction. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- separator (str): Column separator, for OLGA this is by default "\t".

- column_mapping (dict): defines which columns to import from olga format: keys are the number of the columns and values are the names of the columns to be mapped to


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_olga_dataset:
        format: OLGA
        params:
            path: path/to/files/
            is_repertoire: True # whether to import a RepertoireDataset (True) or a SequenceDataset (False)
            metadata_file: path/to/metadata.csv # metadata file for RepertoireDataset
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even though the nucleotide sequence might be empty
            import_empty_aa_sequences: False # filter out sequences if they don't have sequence_aa set
            # Optional fields with OLGA-specific defaults, only change when different behavior is required:
            separator: "\t" # column separator
            region_type: IMGT_CDR3 # what part of the sequence to import
            columns_to_load: [0, 1, 2, 3]
            column_mapping:
                0: sequences
                1: sequence_aas
                2: v_genes
                3: j_genes


SingleLineReceptor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data from a tabular file (where each line contains a pair of immune receptor sequences) into a ReceptorDataset.
If you instead want to import a ReceptorDataset from a tabular file that contains one receptor sequence per line,
see :ref:`Generic` import.


Arguments:

- path (str): Required parameter. This is the path to a directory with files to import.

- receptor_chains (str): Required parameter. Determines which pair of chains to import for each Receptor. Valid values for receptor_chains are: `TRA_TRB`, `TRG_TRD`, `IGH_IGL`, `IGH_IGK`.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. When IMGT_CDR3 is specified, immuneML assumes the IMGT junction (including leading C and trailing Y/F amino acids) is used in the input file, and the first and last amino acids will be removed from the sequences to retrieve the IMGT CDR3 sequence. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- column_mapping (dict): A mapping where the keys are the column names in the input file, and the values must be mapped to the following fields: <chain>_amino_acid_sequence, <chain>_nucleotide_sequence, <chain>_v_gene, <chain>_j_gene, identifier, epitope. The possible names that can be filled in for <chain> are: `ALPHA`, `BETA`, `GAMMA`, `DELTA`, `HEAVY`, `LIGHT`, `KAPPA`. Any column namme other than the sequence, v/j genes and identifier will be set as metadata fields to the Receptors, and can subsequently be used as labels in immuneML instructions. For TCR alpha-beta receptor import, a column mapping could for example look like this:

    .. indent with spaces
    .. code-block:: yaml

        cdr3_a_aa: alpha_amino_acid_sequence
        cdr3_b_aa: beta_amino_acid_sequence
        cdr3_a_nucseq: alpha_nucleotide_sequence
        cdr3_b_nucseq: beta_nucleotide_sequence
        v_a_gene: alpha_v_call
        v_b_gene: beta_v_call
        j_a_gene: alpha_j_call
        j_b_gene: beta_j_call
        clone_id: identifier
        count: duplicate_count
        epitope: epitope # metadata field

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded.

- columns_to_load (list): Optional; specifies which columns to load from the input file. This may be useful if the input files contain many unused columns. If no value is specified, all columns are loaded.

- separator (str): Required parameter. Column separator, for example "\t" or ",".

- organism (str): The organism that the receptors came from. This will be set as a parameter in the ReceptorDataset object.


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_receptor_dataset:
        format: SingleLineReceptor
        params:
            path: path/to/files/
            receptor_chains: TRA_TRB # what chain pair to import
            separator: "\t" # column separator
            import_empty_nt_sequences: True # keep sequences even though the nucleotide sequence might be empty
            import_empty_aa_sequences: False # filter out sequences if they don't have sequence_aa set
            region_type: IMGT_CDR3 # what part of the sequence to import
            columns_to_load: # which subset of columns to load from the file
            - subject
            - epitope
            - count
            - v_a_gene
            - j_a_gene
            - cdr3_a_aa
            - v_b_gene
            - j_b_gene
            - cdr3_b_aa
            - clone_id
            column_mapping: # column mapping file: immuneML
                cdr3_a_aa: alpha_amino_acid_sequence
                cdr3_b_aa: beta_amino_acid_sequence
                cdr3_a_nucseq: alpha_nucleotide_sequence
                cdr3_b_nucseq: beta_nucleotide_sequence
                v_a_gene: alpha_v_call
                v_b_gene: beta_v_call
                j_a_gene: alpha_j_call
                j_b_gene: beta_j_call
                count: duplicate_count
                clone_id: identifier
                epitope: epitope
                organism: mouse


TenxGenomics
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data from the 10xGenomics Cell Ranger analysis pipeline into a Repertoire-, Sequence- or ReceptorDataset.
RepertoireDatasets should be used when making predictions per repertoire, such as predicting a disease state.
SequenceDatasets or ReceptorDatasets should be used when predicting values for unpaired (single-chain) and paired
immune receptors respectively, like antigen specificity.

The files that should be used as input are named 'Clonotype consensus annotations (CSV)',
as described here: https://support.10xgenomics.com/single-cell-vdj/software/pipelines/latest/output/annotation#consensus

Note: by default the 10xGenomics field 'umis' is used to define the immuneML field counts. If you want to use the 10x Genomics
field reads instead, this can be changed in the column_mapping (set reads: counts).
Furthermore, the 10xGenomics field clonotype_id is used for the immuneML field cell_id.


Arguments:

- path (str): For RepertoireDatasets, this is the path to a directory with 10xGenomics files to import. For Sequence- or ReceptorDatasets this path may either be the path to the file to import, or the path to the folder locating one or multiple files with .tsv, .csv or .txt extensions. By default path is set to the current working directory.

- is_repertoire (bool): If True, this imports a RepertoireDataset. If False, it imports a SequenceDataset or ReceptorDataset. By default, is_repertoire is set to True.

- metadata_file (str): Required for RepertoireDatasets. This parameter specifies the path to the metadata file. This is a csv file with columns filename, subject_id and arbitrary other columns which can be used as labels in instructions. For setting Sequence- or ReceptorDataset metadata, metadata_file is ignored, see metadata_column_mapping instead.

- paired (str): Required for Sequence- or ReceptorDatasets. This parameter determines whether to import a SequenceDataset (paired = False) or a ReceptorDataset (paired = True). In a ReceptorDataset, two sequences with chain types specified by receptor_chains are paired together based on the identifier given in the 10xGenomics column named 'clonotype_id'.

- receptor_chains (str): Required for ReceptorDatasets. Determines which pair of chains to import for each Receptor.  Valid values are `TRA_TRB`, `TRG_TRD`, `IGH_IGL`, `IGH_IGK`. If receptor_chains is not provided, the chain pair is automatically detected (only one chain pair type allowed per repertoire).

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means the first and last amino acids are removed from the CDR3 sequence, as 10xGenomics uses IMGT junction as CDR3. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- column_mapping (dict): A mapping from 10xGenomics column names to immuneML's internal data representation. A custom column mapping can be specified here if necessary (for example; adding additional data fields if they are present in the 10xGenomics file, or using alternative column names). Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id'].. For 10xGenomics, this is by default set to:

    .. indent with spaces
    .. code-block:: yaml

            cdr3: sequence_aa
            cdr3_nt: sequence
            v_gene: v_call
            j_gene: j_call
            umis: duplicate_count
            clonotype_id: cell_id
            consensus_id: sequence_id

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded. For 10xGenomics format, there is no default column_mapping_synonyms.

- metadata_column_mapping (dict): Specifies metadata for Sequence- and ReceptorDatasets. This should specify a mapping similar to column_mapping where keys are 10xGenomics column names and values are the names that are internally used in immuneML as metadata fields. These metadata fields can be used as prediction labels for Sequence- and ReceptorDatasets. This parameter can also be used to specify sequence-level metadata columns for RepertoireDatasets, which can be used by reports. To set prediction label metadata for RepertoireDatasets, see metadata_file instead. For 10xGenomics format, there is no default metadata_column_mapping.

- separator (str): Column separator, for 10xGenomics this is by default ",".


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_10x_dataset:
        format: 10xGenomics
        params:
            path: path/to/files/
            is_repertoire: True # whether to import a RepertoireDataset
            metadata_file: path/to/metadata.csv # metadata file for RepertoireDataset
            paired: False # whether to import SequenceDataset (False) or ReceptorDataset (True) when is_repertoire = False
            receptor_chains: TRA_TRB # what chain pair to import for a ReceptorDataset
            metadata_column_mapping: # metadata column mapping 10xGenomics: immuneML for SequenceDataset
                tenx_column_name1: metadata_label1
                tenx_column_name2: metadata_label2
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even though the nucleotide sequence might be empty
            import_empty_aa_sequences: False # filter out sequences if they don't have sequence_aa set
            # Optional fields with 10xGenomics-specific defaults, only change when different behavior is required:
            separator: "," # column separator
            region_type: IMGT_CDR3 # what part of the sequence to import
            column_mapping: # column mapping 10xGenomics: immuneML
                cdr3: sequence_aa
                cdr3_nt: sequence
                v_gene: v_call
                j_gene: j_call
                umis: duplicate_count
                clonotype_id: cell_id
                consensus_id: sequence_id


VDJdb
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


Imports data in VDJdb format into a Repertoire-, Sequence- or ReceptorDataset.
RepertoireDatasets should be used when making predictions per repertoire, such as predicting a disease state.
SequenceDatasets or ReceptorDatasets should be used when predicting values for unpaired (single-chain) and paired
immune receptors respectively, like antigen specificity.


Arguments:

- path (str): For RepertoireDatasets, this is the path to a directory with VDJdb files to import. For Sequence- or ReceptorDatasets this path may either be the path to the file to import, or the path to the folder locating one or multiple files with .tsv, .csv or .txt extensions. By default path is set to the current working directory.

- is_repertoire (bool): If True, this imports a RepertoireDataset. If False, it imports a SequenceDataset or ReceptorDataset. By default, is_repertoire is set to True.

- metadata_file (str): Required for RepertoireDatasets. This parameter specifies the path to the metadata file. This is a csv file with columns filename, subject_id and arbitrary other columns which can be used as labels in instructions. For setting Sequence- or ReceptorDataset metadata, metadata_file is ignored, see metadata_column_mapping instead.

- paired (str): Required for Sequence- or ReceptorDatasets. This parameter determines whether to import a SequenceDataset (paired = False) or a ReceptorDataset (paired = True). In a ReceptorDataset, two sequences with chain types specified by receptor_chains are paired together based on the identifier given in the VDJdb column named 'complex.id'.

- receptor_chains (str): Required for ReceptorDatasets. Determines which pair of chains to import for each Receptor. Valid values are `TRA_TRB`, `TRG_TRD`, `IGH_IGL`, `IGH_IGK`. If receptor_chains is not provided, the chain pair is automatically detected (only one chain pair type allowed per repertoire).

- import_illegal_characters (bool): Whether to import sequences that contain illegal characters, i.e., characters that do not appear in the sequence alphabet (amino acids including stop codon '*', or nucleotides). When set to false, filtering is only applied to the sequence type of interest (when running immuneML in amino acid mode, only entries with illegal characters in the amino acid sequence are removed). By default import_illegal_characters is False.

- import_empty_nt_sequences (bool): imports sequences which have an empty nucleotide sequence field; can be True or False. By default, import_empty_nt_sequences is set to True.

- import_empty_aa_sequences (bool): imports sequences which have an empty amino acid sequence field; can be True or False; for analysis on amino acid sequences, this parameter should be False (import only non-empty amino acid sequences). By default, import_empty_aa_sequences is set to False.

- region_type (str): Which part of the sequence to import. By default, this value is set to IMGT_CDR3. This means the first and last amino acids are removed from the CDR3 sequence, as VDJdb uses IMGT junction as CDR3. Specifying any other value will result in importing the sequences as they are. Valid values are `IMGT_CDR1`, `IMGT_CDR2`, `IMGT_CDR3`, `IMGT_FR1`, `IMGT_FR2`, `IMGT_FR3`, `IMGT_FR4`, `IMGT_JUNCTION`, `FULL_SEQUENCE`.

- column_mapping (dict): A mapping from VDJdb column names to immuneML's internal data representation. A custom column mapping can be specified here if necessary (for example; adding additional data fields if they are present in the VDJdb file, or using alternative column names). Valid immuneML fields that can be specified here are ['sequence_aa', 'sequence', 'v_call', 'j_call', 'chain', 'duplicate_count', 'frame_type', 'sequence_id', 'cell_id'].. For VDJdb, this is by default set to:

    .. indent with spaces
    .. code-block:: yaml

            V: v_call
            J: j_call
            CDR3: sequence_aa
            complex.id: sequence_id
            Gene: chain

- column_mapping_synonyms (dict): This is a column mapping that can be used if a column could have alternative names. The formatting is the same as column_mapping. If some columns specified in column_mapping are not found in the file, the columns specified in column_mapping_synonyms are instead attempted to be loaded. For VDJdb format, there is no default column_mapping_synonyms.

- metadata_column_mapping (dict): Specifies metadata for Sequence- and ReceptorDatasets. This should specify a mapping similar to column_mapping where keys are VDJdb column names and values are the names that are internally used in immuneML as metadata fields. This means that epitope, epitope_gene and epitope_species can be used as prediction labels for Sequence- and ReceptorDatasets. This parameter can also be used to specify sequence-level metadata columns for RepertoireDatasets, which can be used by reports. To set prediction label metadata for RepertoireDatasets, see metadata_file instead. For VDJdb format, this parameter is by default set to:

    .. indent with spaces
    .. code-block:: yaml

            Epitope: epitope
            Epitope gene: epitope_gene
            Epitope species: epitope_species

- separator (str): Column separator, for VDJdb this is by default "\t".


YAML specification:

.. indent with spaces
.. code-block:: yaml

    my_vdjdb_dataset:
        format: VDJdb
        params:
            path: path/to/files/
            is_repertoire: True # whether to import a RepertoireDataset
            metadata_file: path/to/metadata.csv # metadata file for RepertoireDataset
            paired: False # whether to import SequenceDataset (False) or ReceptorDataset (True) when is_repertoire = False
            receptor_chains: TRA_TRB # what chain pair to import for a ReceptorDataset
            import_illegal_characters: False # remove sequences with illegal characters for the sequence_type being used
            import_empty_nt_sequences: True # keep sequences even though the nucleotide sequence might be empty
            import_empty_aa_sequences: False # filter out sequences if they don't have sequence_aa set
            # Optional fields with VDJdb-specific defaults, only change when different behavior is required:
            separator: "\t" # column separator
            region_type: IMGT_CDR3 # what part of the sequence to import
            column_mapping: # column mapping VDJdb: immuneML
                V: v_call
                J: j_call
                CDR3: sequence_aa
                complex.id: sequence_id
                Gene: chain
            metadata_column_mapping: # metadata column mapping VDJdb: immuneML
                Epitope: epitope
                Epitope gene: epitope_gene
                Epitope species: epitope_species

